(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.index = global.index || {}, global.index.js = factory()));
})(this, (function () { 'use strict';

	const FunctionComponent = 0; // 函数组件
	const HostRoot = 3; // 挂载的根节点 ReactDOM.render(<App />, document.getElementById('root'))
	const HostComponent = 5; // 原生标签 div span
	// <div>123</div>
	const HostText = 6; // 文本节点 123

	const NoFlags = 0b0000000;
	const Placement = 0b0000001;
	const Update = 0b0000010; // 更新属性
	const ChildDeletion = 0b0000100; // 删除子节点
	const MutationMask = Placement | Update | ChildDeletion;

	class FiberNode {
	    // 类型声明
	    type;
	    key;
	    tag;
	    pendingProps;
	    stateNode;
	    return;
	    sibling;
	    child;
	    updateQueue;
	    memoizedState;
	    index;
	    ref;
	    memoizedProps;
	    alternate; // 用于双缓存技术，如果当前fibernode 是 current，则 alternate 是 workInProgress，反之亦然
	    flags; // 用于标记当前节点的状态
	    subtreeFlags; // 用于标记子树的状态
	    constructor(tag, pendingProps, key) {
	        // 在构造函数中初始化属性
	        this.tag = tag;
	        this.key = key;
	        this.pendingProps = pendingProps;
	        this.stateNode = null; // 对于原生标签，比如 div、span，stateNode 是真实的 DOM 节点
	        this.type = null; // 对于函数组件，type 是函数本身，例如 () => {}
	        // 构成树状结构
	        this.return = null; // 指向父节点
	        this.child = null; // 指向第一个子节点
	        this.sibling = null; // 指向下一个兄弟节点
	        this.index = 0; // 在父节点中的索引 <ul> <li>1</li> <li>2</li> </ul> li 1 的 index 是 0，li 2 的 index 是 1
	        this.ref = null; // ref 属性
	        // 作为工作单元
	        this.pendingProps = pendingProps; // 刚开始工作的时候，这个属性存储的是 props
	        this.memoizedProps = null; // 确定下来的 props
	        this.alternate = null; // 用于双缓存技术
	        this.updateQueue = null; // 更新队列
	        // 副作用标记
	        this.flags = NoFlags; // 标记当前节点的状态
	        this.subtreeFlags = NoFlags; // 标记子树的状态
	    }
	}
	class FiberRootNode {
	    container;
	    current;
	    finishedWork; // 已经完成的工作单元
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	const createWorkInProgress = (current, pendingProps) => {
	    let wip = current.alternate;
	    if (wip === null) {
	        // mount
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        // update
	        wip.pendingProps = pendingProps;
	        wip.flags = NoFlags;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memoizedProps = current.memoizedProps;
	    wip.memoizedState = current.memoizedState;
	    return wip;
	};
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent; // 默认是函数组件
	    if (typeof type === 'string') {
	        // <div/> type: 'div'
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('为定义的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}

	// 函数的泛型写法
	const createUpdate = (action) => {
	    return {
	        action
	    };
	};
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        }
	    };
	};
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	};
	// 消费 update
	const processUpdateQueue = (baseState, pendingUpdate) => {
	    // 返回值
	    const result = {
	        memorizedSate: baseState
	    };
	    // 消费的过程
	    if (pendingUpdate !== null) {
	        const action = pendingUpdate.action;
	        if (action instanceof Function) {
	            // 如果是函数，执行函数
	            // baseState 1 upadate (x) => 4x -> memorizedSate 4
	            result.memorizedSate = action(baseState);
	        }
	        else {
	            // 如果是对象，直接赋值
	            // baseState 1 upadate 2 -> memorizedSate 2
	            result.memorizedSate = action;
	        }
	    }
	    return result;
	};

	const supportsSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportsSymbol
	    ? Symbol.for('react.element') // 独一无二的值
	    : 0xeac7;

	/**
	 * 构建离屏的fiber树
	 * @param {boolean} shouldTrackEffects  是否需要追踪副作用
	 * @returns {(returnFiber: FiberNode, currentFiber: any, newChild?: ReactElementType) => any}
	 */
	function ChildReconciler(shouldTrackEffects) {
	    function reconcileSingleElement(returnFiber, currentFiber, element) {
	        // 根据element创建fiber
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function placeSingleChild(fiber) {
	        // 首屏渲染且标记副作用的情况下，将fiber标记为Placement
	        if (shouldTrackEffects && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    // 放回一个闭包, 可以根据是否传 shouldTrackEffects 参数来决定是否追踪副作用
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        // 判断当前fiber的类型
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的reconcile类型', newChild);
	                    }
	                    break;
	            }
	        }
	        // TODO 多节点的情况 ul> li*3
	        // HostText
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        {
	            console.warn('未实现的reconcile类型', newChild);
	        }
	        return null;
	    };
	}
	const reconcileChildFibers = ChildReconciler(true); // 追踪副作用
	const mountChildFibers = ChildReconciler(false); // 不追踪副作用

	// 获取函数组件并将props传入,返回执行结果
	function renderWithHooks(wip) {
	    const Component = wip.type;
	    const props = wip.pendingProps;
	    const children = Component(props);
	    return children;
	}

	// 递归中的递阶段
	const beginWork = (wip) => {
	    // 比较，返回子fiberNode
	    switch (wip.tag) {
	        case HostRoot: // 对应于根节点
	            return updateHostRoot(wip);
	        case HostComponent: // 对应于真实的DOM元素
	            return updateHostComponent(wip);
	        case HostText:
	            return null; // 文本节点不需要更新，没有子节点(叶子结点,递到这里就结束了)
	        case FunctionComponent:
	            return updateFunctionComponent(wip);
	        default:
	            {
	                console.warn('beginWork未实现的类型');
	            }
	            break;
	    }
	    return null;
	};
	function updateFunctionComponent(wip) {
	    const nextChildren = renderWithHooks(wip);
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateHostRoot(wip) {
	    const baseState = wip.memoizedState; // wip 的 memoizedState 是上一次的状态，对首屏来说是 null
	    const updateQueue = wip.updateQueue; // wip 的 updateQueue 是上一次的更新队列
	    const pending = updateQueue.shared.pending; // 从更新队列中取出更新
	    updateQueue.shared.pending = null; // 清空更新队列
	    const { memorizedSate } = processUpdateQueue(baseState, pending); // 消费更新, 这里的 memoizedState 是新的状态
	    wip.memoizedState = memorizedSate;
	    const nextChildren = wip.memoizedState;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	// 与 updateHostRoot 类似，不同的是这里的 wip 是 HostComponent 类型，不触发更新
	function updateHostComponent(wip) {
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	// 返回子fiberNode
	function reconcileChildren(wip, children) {
	    const current = wip.alternate;
	    if (current !== null) {
	        // update
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        // mount
	        wip.child = mountChildFibers(wip, null, children);
	    }
	}

	// export const createInstance = (type: string, props: any): Instance => {
	const createInstance = (type) => {
	    // TODO 处理props
	    const element = document.createElement(type);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;

	let nextEffect = null; // 定义一 个全局的变量,指向下一个effect
	const commitMutationEffects = (finishedWork) => {
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        // 向下遍历
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags &&
	            child !== null) {
	            nextEffect = child;
	        }
	        else {
	            // 向上遍历 DFS
	            up: while (nextEffect !== null) {
	                commitMutaitonEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	const commitMutaitonEffectsOnFiber = (finishedWork) => {
	    const flags = finishedWork.flags;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        finishedWork.flags &= ~Placement; // 移除 Placement
	    }
	    // flags Update
	    // flags ChildDeletion
	};
	const commitPlacement = (finishedWork) => {
	    {
	        console.warn('执行Placement操作', finishedWork);
	    }
	    // parent DOM
	    const hostParent = getHostParent(finishedWork);
	    // finishedWork ~~ DOM append parent DOM
	    if (hostParent !== null) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	};
	// 获取宿主环境
	function getHostParent(fiber) {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        // HostComponent HostRoot
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('未找到host parent');
	    }
	    return null;
	}
	// 挂载操作
	function appendPlacementNodeIntoContainer(finishedWork, hostParent) {
	    // fiber host
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(hostParent, finishedWork.stateNode);
	        return;
	    }
	    const child = finishedWork.child;
	    if (child !== null) {
	        appendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            appendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	}

	const completeWork = (wip) => {
	    // 递归中的归
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent:
	            if (current !== null && wip.stateNode) ;
	            else {
	                // 1. 构建DOM
	                // const instance = createInstance(wip.type, newProps);
	                const instance = createInstance(wip.type);
	                // 2. 将DOM插入到DOM树中
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            if (current !== null && wip.stateNode) ;
	            else {
	                // 1. 构建DOM
	                const instance = createTextInstance(newProps.content);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostRoot:
	            bubbleProperties(wip);
	            return null;
	        case FunctionComponent:
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('未处理的completeWork情况', wip);
	            }
	            break;
	    }
	};
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    // 递归遍历子节点
	    while (node !== null) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            appendInitialChild(parent, node?.stateNode);
	        }
	        else if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        // 终止条件
	        if (node === wip) {
	            return;
	        }
	        // 兄弟节点
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                // 往上找到父节点(归)
	                return;
	            }
	            node = node?.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	// 将子节点的标记向上传递(冒泡)
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        // 位操作-收集子节点的标记
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	let workInProgress = null;
	function prepareFreshStack(root) {
	    workInProgress = createWorkInProgress(root.current, {});
	}
	function scheduleUpdateOnFiber(fiber) {
	    // TODO 调度功能
	    // fiberRootNode
	    const root = markUpdateFromFiberToRoot(fiber);
	    renderRoot(root);
	}
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    let parent = node.return;
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}
	function renderRoot(root) {
	    // 初始化
	    prepareFreshStack(root);
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (e) {
	            {
	                console.warn('workLoop发生错误', e);
	            }
	            workInProgress = null;
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    // wip fiberNode树 树中的flags 执行具体的 dom 操作
	    commitRoot(root);
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.warn('commit阶段开始', finishedWork);
	    }
	    // 重置
	    root.finishedWork = null;
	    // 判断是否存在3个子阶段需要执行的操作
	    // root flags root subtreeFlags
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        // beforeMutation
	        // mutation Placement
	        commitMutationEffects(finishedWork);
	        root.current = finishedWork; // 完成双缓存的切换!
	        // layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	}
	function workLoop() {
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	}
	function performUnitOfWork(fiber) {
	    // 1. beginWork
	    const next = beginWork(fiber);
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next === null) {
	        // 2. completeUnitOfWork
	        completeUnitOfWork(fiber);
	    }
	    else {
	        workInProgress = next;
	    }
	}
	function completeUnitOfWork(fiber) {
	    // 3. completeWork
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	}

	// 创建整个应用的根节点 FiberrootNode
	function createContainer(container) {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    // 首屏渲染触发更新
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    // 开始调度
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	}

	// ReactDOM.createRoot(root).render(<App/>)
	function createRoot(container) {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
